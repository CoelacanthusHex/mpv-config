###########
# General #
###########

save-position-on-quit

# 高优先级
#priority=high

########
# 视频 #
########

# 指定要使用的视频输出后端。
vo=gpu
#vo=vaapi
#vo=opengl
#vo=vdpau
profile=gpu-hq

#hwdec=auto-copy
hwdec=auto
#hwdec=nvdec
#hwdec=vaapi
#hwdec=vdpau
# 仅允许给定编解码器列表进行硬件解码
#hwdec-codecs=all
#hwdec-codecs=h264_cuvid,h264,h264_v4l2m2m,h264_qsv

### gpu-api的选择？
## macOS：  只有opengl可选
## Linux：  vulkan或者opengl，推荐vulkan
## Windows：vulkan、d3d11及opengl都可选。三者理论上vulkan性能最好，但依然推荐d3d11。
## 通过d3d11 api，目前mpv已支持windows的10 bit输出和HDR colorspace的设定。
## HDR metadata pass on正在跟进，独占全屏正在跟进。
gpu-api=vulkan

vulkan-async-compute=yes
vulkan-async-transfer=yes

# may help with 4K videos
vd-lavc-dr=yes
opengl-pbo=yes

# "ReClock" replacement SVP补帧时推荐关闭
# 因为 Vulkan 的问题关闭
video-sync=display-resample

# smooth motion, SVP补帧时推荐关闭
interpolation

dither-depth=auto
temporal-dither
dither-size-fruit=7
# 默认6。会稍微延缓mpv启动
# 有兴趣也可以测试下error diffusion算法

# emmmmmm
deband=yes

# interpolation使用的算法。详见https://mpv.io/manual/master/#options-tscale
# 一些讨论见 https://github.com/mpv-player/mpv/issues/2685
# 目前的默认为mitchell。总体而言mitchell更平滑（当然不好和SVP插帧比），但会有模糊。oversample没有模糊，但不平滑（基本还原24帧的样子）
# 具体选择哪个请依据自身需求来
# SVP补帧时推荐关闭
tscale=oversample

# 放大算法，gpu-hq的默认为spline36
scale=ewa_lanczossharp
# 色度升频算法
cscale=ewa_lanczossharp
# 缩小算法
dscale=mitchell

# 启用校色
icc-profile-auto
# 默认64x64x64。会稍微延缓mpv启动
icc-3dlut-size=256x256x256
icc-cache-dir=/tmp/mpv-icc


#############
# 脚本 滤镜 #
#############

#  A4k滤镜中推荐Ctrl+3，你也可以选择启用该默认方案
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Denoise_Bilateral_Mode.glsl;~~/shaders/Anime4K/Anime4K_Deblur_DoG.glsl;~~/shaders/Anime4K/Anime4K_DarkLines_HQ.glsl;~~/shaders/Anime4K/Anime4K_ThinLines_HQ.glsl;~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"
# 高级的cscale色度升频算法
#glsl-shaders-append="~~/shaders/igv/KrigBilateral.glsl"

# For 480/720p videos:
# Remain as faithful to the original while enhancing details:
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Upscale_CNN_L_x2_Denoise.glsl:~~/shaders/Anime4K/Anime4K_Auto_Downscale_Pre_x4.glsl:~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"
# Improve perceptual quality:
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Upscale_CNN_L_x2_Denoise.glsl:~~/shaders/Anime4K/Anime4K_Auto_Downscale_Pre_x4.glsl:~~/shaders/Anime4K/Anime4K_DarkLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_ThinLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"
# Improve perceptual quality + deblur:
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Upscale_CNN_L_x2_Denoise.glsl:~~/shaders/Anime4K/Anime4K_Auto_Downscale_Pre_x4.glsl:~~/shaders/Anime4K/Anime4K_Deblur_DoG.glsl:~~/shaders/Anime4K/Anime4K_DarkLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_ThinLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"

# For 1080p videos:
# Remain as faithful to the original while enhancing details:
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Denoise_Bilateral_Mode.glsl:~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"
# Improve perceptual quality:
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Denoise_Bilateral_Mode.glsl:~~/shaders/Anime4K/Anime4K_DarkLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_ThinLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"
# Improve perceptual quality + deblur:
#glsl-shaders="~~/shaders/Anime4K/Anime4K_Denoise_Bilateral_Mode.glsl:~~/shaders/Anime4K/Anime4K_Deblur_DoG.glsl:~~/shaders/Anime4K/Anime4K_DarkLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_ThinLines_HQ.glsl:~~/shaders/Anime4K/Anime4K_Upscale_CNN_M_x2_Deblur.glsl"


# 在mpv.conf所在目录下建一个 shaders_cache 空文件夹，以存放编译好的GPU shaders，加速启动。
# 注意！如果不放APPDATA下，确保该文件夹有用户写入权限。
gpu-shader-cache-dir="~~/shaders_cache"


########
# 功能 #
########

# 如果你喜欢无边框的界面，你应该取消这行的前置注释#
#no-border
# 以暂停状态启动播放器
pause
# <N|inf|no> 始终循环播放当前文件
#loop=inf
# <N|inf|force|no>播放列表循环
#loop-playlist=no
# 播放完毕不退出
keep-open=yes
# 输出视频帧时请勿入睡。（开启后无法正确显示补帧数值）
#untimed
# 以秒为单位显示OSD时间（毫秒精度）。有助于查看视频帧的确切时间戳。
osd-fractions
# 设置OSD信息的持续时间（毫秒）（默认值：1000）
osd-duration=5000
# 记录log在桌面
#log-file="~~desktop/mpv.log"


########
# 音频 #
########

# 经测试如果有其他软件独占音频通道后再打开MPV画面会无比卡顿
#ao=wasapi
ao=pulse
# 音频通道独占
#audio-exclusive=yes
# <默认no|exact|fuzzy|all> 自动加载同名外挂音轨
audio-file-auto=fuzzy
# <100.0-1000.0>
#volume-max=100
# 播放器启动音量，0为静音
#volume=100

# 如果双声道系统播放多声道影片时有的声道声音没出现，尝试强制设定为双声道
#audio-channels=stereo
# 规格化：
#audio-normalize-downmix=yes
# 多声道音轨downmix成双声道时，如果觉得背景音过响，角色台词声音小，尝试看看这个：https://github.com/mpv-player/mpv/issues/6563

# Specify default audio device. You can list devices with: --audio-device=help
# The option takes the device string (the stuff between the '...').
#audio-device=alsa/default

# Do not filter audio to keep pitch when changing playback speed.
#audio-pitch-correction=no

# Output 5.1 audio natively, and upmix/downmix audio with a different format.
#audio-channels=5.1
# Disable any automatic remix, _if_ the audio output accepts the audio format.
# of the currently played file. See caveats mentioned in the manpage.
# (The default is "auto-safe", see manpage.)
#audio-channels=auto

########
# 字幕 #
########

# 自动加载同名外挂字幕
sub-auto=fuzzy
sub-file-paths=subs
# 字幕首选语言为(简体)中文
slang=chi,zh-CN,sc,chs,zh,jp,jpn,eng,en
alang=chi,zh-CN,sc,chs,zh,jp,jpn,eng,en
# <yes|video|默认no> 在插值和/或颜色管理之前，将字幕直接混合到升级的视频帧上（默认值：否）。 启用此选项会导致字幕受--icc-profile，--target-prim，--target-trc，--interpolation，--gamma-factor和--glsl-shaders的影响。 使用--interpolation时，还可以提高字幕性能。启用此功能的缺点是将字幕限制在视频的可见部分，因此，字幕不能出现在视频下方的黑色空白处（例如）。如果选择了video，则行为类似于yes，但是以视频的原始分辨率绘制了子对象，并与视频一起缩放。
blend-subtitles=video
# 使字幕输出在黑边上
sub-ass-force-margins=yes
#sid=1
# 字幕显示出来和xy-subfilter不一样？尝试启用下面的设置
# 关乎字幕是否随视频拉伸
#sub-ass-vsfilter-aspect-compat=no
# 关乎字幕模糊的设定
#sub-ass-vsfilter-blur-compat=no
# 即使都用上了也不一致？那不是这两个选项的问题，重新注释掉这两行，回帖问吧。（多半是vsfilter/libass其中一个的bug）

########
# 截图 #
########

# <默认jpg|png|webp>
screenshot-format=webp
# 默认为7（0-9）
#screenshot-png-compression=7
# 设置在PNG压缩之前应用的过滤器。0为无，1为sub，2为up，3为average，4为Paeth，5为mixed，这会影响可以达到的压缩级别。对于大多数图像，mixed可实现最佳压缩率，因此它是默认设置。
#screenshot-png-filter=5
screenshot-webp-lossless=yes
screenshot-webp-quality=100
screenshot-webp-compression=4 # 默认为4<0-6>
#screenshot-jpeg-quality=100
#screenshot-jpeg-source-chroma=yes
screenshot-tag-colorspace=yes
screenshot-high-bit-depth=yes
# s键保存路径截图在桌面
#screenshot-directory=~~desktop/


#######
# OSD #
#######

#osd-bar=no								# Do not remove/comment if mpv_thumbnail_script_client_osc.lua is being used.
#osd-font='Source Sans Pro'				# Set a font for OSC
#osd-font-size=22						# Set a font size
#osd-color='#CCFFFFFF'                   # ARGB format
#osd-border-color='#DD322640'            # ARGB format
#osd-bar-align-y=-1                      # progress bar y alignment (-1 top, 0 centered, 1 bottom)
#osd-border-size=1                       # size for osd text and progress bar
#osd-bar-h=2                             # height of osd bar as a fractional percentage of your screen height
#osd-bar-w=60                            # width of " " "


##########
# Others #
##########

# Pretend to be a web browser. Might fix playback with some streaming sites,
# but also will break with shoutcast streams.
#user-agent="Mozilla/5.0"

# cache settings
#
# Use a large seekable RAM cache even for local input.
#cache=yes

cache=auto
# use max quality for HLS streams
hls-bitrate=max

#
# Use extra large RAM cache (needs cache=yes to make it useful).
#demuxer-max-bytes=500M
#demuxer-max-back-bytes=100M
#
# Disable the behavior that the player will pause if the cache goes below a
# certain fill size.
#cache-pause=no
#
# Store cache payload on the hard disk instead of in RAM. (This may negatively
# impact performance unless used for slow input such as network.)
#cache-dir=~/.cache/
#cache-on-disk=yes

# Display English subtitles if available.
#slang=en

# Play Finnish audio if available, fall back to English otherwise.
#alang=fi,en

# Change subtitle encoding. For Arabic subtitles use 'cp1256'.
# If the file seems to be valid UTF-8, prefer UTF-8.
# (You can add '+' in front of the codepage to force it.)
#sub-codepage=cp1256

# You can also include other configuration files.
#include=/path/to/the/file/you/want/to/include

ytdl=yes
#ytdl-format=(bestvideo[ext=webm]/bestvideo[height>1080]/bestvideo[fps=60])[tbr<13000]+(bestaudio[acodec=opus]/bestaudio[ext=webm]/bestaudio[acodec=vorbis]/bestaudio[acodec=aac]/bestaudio)/best
ytdl-format=(bestvideo[height<=3840][vcodec=vp9]/bestvideo[height<=3840])+bestaudio
script-opts=ytdl_hook-ytdl_path=yt-dlp

# Colors!
msg-color=yes
msg-module=yes

############
# Profiles #
############

# The following profile can be enabled on the command line with: --profile=eye-cancer

# 根据视频是否是HDR以及视频aspect ratio决定是否启用blend-subtitles的profile
# 目前HDR->SDR建议关闭blend-subtitles，见https://github.com/mpv-player/mpv/issues/6368
# 如果hdr-compute-peak将来继续改进可能可以兼容blend-subtitles
[HDR_or_21:9]
profile-desc=cond:(p["video-params/primaries"]=="bt.2020" or p["video-params/aspect"]>=2.0)
profile-cond=p["video-params/primaries"]=="bt.2020" or p["video-params/aspect"]>=2.0
blend-subtitles=no
# 使字幕输出在黑边上
sub-ass-force-margins=yes

[SDR_and_16:9]
profile-desc=cond:(p["video-params/primaries"]~="bt.2020" and p["video-params/aspect"]<2.0)
profile-cond=p["video-params/primaries"]~="bt.2020" and p["video-params/aspect"]<2.0
blend-subtitles=yes
sub-ass-force-margins=no

# 以下根据分辨率和视频帧率设置不同的升/降阶算法，以期获得在能不掉帧的情况下达到最好的效果

# 创建一个基于gpu-hq，用于将一些参数回归到默认的profile：
[high_quality]
profile=gpu-hq
## !!! 使用  fbo-format=rgba16hf  可能能提高效率
fbo-format=rgba32f
## !!! 使用  fbo-format=rgba16hf  可能能提高效率
vd-lavc-threads=0

# 1080 * 1.414213 / 4 = 381.8
[low] # 240p 360p，启用两次倍增以达到4倍.
profile-desc=cond:(p["video-params/w"]<=678 and p["video-params/h"]<=381)
profile-cond=p["video-params/w"]<=678 and p["video-params/h"]<=381
profile=high_quality
glsl-shaders-clr
glsl-shaders-append="~~/shaders/igv/KrigBilateral.glsl"
glsl-shaders-append="~~/shaders/compute/nnedi3-nns32-win8x4.hook"
glsl-shaders-append="~~/shaders/compute/nnedi3-nns32-win8x4.hook"

# 1080 / 16 * 9 = 607.5
[SD] # 480p 576p
profile-desc=cond:((p["video-params/w"]<1080 and p["video-params/h"]<608) and (p["video-params/w"]>678 or p["video-params/h"]>381))
profile-cond=(p["video-params/w"]<1080 and p["video-params/h"]<608) and (p["video-params/w"]>678 or p["video-params/h"]>381)
profile=high_quality
glsl-shaders-clr
glsl-shaders-append="~~/shaders/igv/KrigBilateral.glsl"
glsl-shaders-append="~~/shaders/compute/nnedi3-nns64-win8x4.hook"

# 1080 * 1.414213 / 2 = 763.7
[HD30] # 640p 720p 30fps
profile-desc=cond:((p["video-params/w"]<1358 and p["video-params/h"]<764) and (p["video-params/w"]>=1080 or p["video-params/h"]>=608) and p["estimated-vf-fps"]<31)
profile-cond=(p["video-params/w"]<1358 and p["video-params/h"]<764) and (p["video-params/w"]>=1080 or p["video-params/h"]>=608) and p["estimated-vf-fps"]<31
profile=high_quality
glsl-shaders-clr
glsl-shaders-append="~~/shaders/igv/KrigBilateral.glsl"
glsl-shaders-append="~~/shaders/compute/nnedi3-nns32-win8x4.hook"

[HD60] # 640p 720p 60fps
profile-desc=cond:((p["video-params/w"]<1358 and p["video-params/h"]<764) and (p["video-params/w"]>=1080 or p["video-params/h"]>=608) and p["estimated-vf-fps"]>=31)
profile-cond=(p["video-params/w"]<1358 and p["video-params/h"]<764) and (p["video-params/w"]>=1080 or p["video-params/h"]>=608) and p["estimated-vf-fps"]>=31
profile=high_quality
glsl-shaders-clr
glsl-shaders-append="~~/shaders/igv/KrigBilateral.glsl"
glsl-shaders-append="~~/shaders/igv/SSimSuperRes.glsl"
# SSimSuperRes推荐关闭sigmoid-upscaling。所以在其他不用SSSR的profile中都要重新设为yes（通过重新设定一遍profile=gpu-hq）
sigmoid-upscaling=no

[KrigBilateral] # 另一个profile的例子
profile=high_quality
glsl-shaders-clr
glsl-shaders-append="~~/shaders/igv/KrigBilateral.glsl"

[FHD] # 1080p
profile-desc=cond:((p["video-params/w"]<=1920 and p["video-params/h"]<=1080) and (p["video-params/w"]>=1358 or p["video-params/h"]>=764))
profile-cond=(p["video-params/w"]<=1920 and p["video-params/h"]<=1080) and (p["video-params/w"]>=1358 or p["video-params/h"]>=764)
profile=KrigBilateral

[2K30] # 1440p
profile-desc=cond:((p["video-params/w"]<=2560 and p["video-params/h"]<=1440) and (p["video-params/w"]>1920 or p["video-params/h"]>1080) and p["estimated-vf-fps"]<31)
profile-cond=(p["video-params/w"]<=2560 and p["video-params/h"]<=1440) and (p["video-params/w"]>1920 or p["video-params/h"]>1080) and p["estimated-vf-fps"]<31
profile=KrigBilateral

# 4K videos
[4K30] # low fps: use SSIM to downscale
profile-desc=cond:((p["video-params/w"]>2560 or p["video-params/h"]>1440) and p["estimated-vf-fps"]<31)
profile-cond=(p["video-params/w"]>2560 or p["video-params/h"]>1440) and p["estimated-vf-fps"]<31
profile=high_quality
glsl-shaders-clr
glsl-shaders-append="~~/shaders/compute/SSimDownscaler.glsl"
# SSimDownscaler要求。需要在其他profile中重新设为yes（通过重新设定一遍profile=gpu-hq）
linear-downscaling=no

[UHD60] # high fps: use no glsl-shaders
profile-desc=cond:((p["video-params/w"]>1920 or p["video-params/h"]>1080) and p["estimated-vf-fps"]>=31)
profile-cond=(p["video-params/w"]>1920 or p["video-params/h"]>1080) and p["estimated-vf-fps"]>=31
glsl-shaders-clr
# 如果是1080p屏幕播放4K，可以使用https://gist.github.com/bjin/15f307e7a1bdb55842bbb663ee1950ed -> acme-0.5x.hook
glsl-shaders-append="~~/shaders/acme-0.5x.hook"
# 可以绕过chroma upscaling，并且把之后颜色转换的计算量从4K级降到1080p级。
fbo-format=auto
vd-lavc-threads=16
# 4K HEVC HDR 60fps软解压力很大，默认vd-lavc-threads=0自动识别逻辑核数，分配核数+1个线程，但往往不够，不能将CPU性能压榨到极限，强行分配更多线程数以提高软解性能。
# 或者直接开硬解，如果显卡支持的话
hwdec=yes
